# 角色管理子领域的详细设计

本节详细说明IAM系统中"角色管理"子领域的核心设计，包括领域实体、聚合、用例流程、接口规范及审计要求等，确保多租户架构下的角色管理安全性、可扩展性与合规性。

---

## 一、角色领域实体设计

### 1.1 角色（Role）领域实体

> 设计要求：角色实体为纯领域对象，不包含任何ORM装饰器或数据库依赖。序列化安全性通过`class-transformer`控制，数据校验通过`class-validator`实现。

- **属性定义**：
  - `id`：角色唯一标识（UUID）
  - `name`：角色名称（在租户内唯一，必填）
  - `code`：角色代码（在租户内唯一，必填，用于系统识别）
  - `description`：角色描述（可选）
  - `status`：角色状态（激活、禁用、已删除等）
  - `tenantId`：所属租户ID（必填，实现数据隔离）
  - `organizationId`：所属组织ID（可选，支持组织级角色）
  - `adminUserId`：创建该角色的管理员ID（必填）
  - `permissionIds`：权限ID列表（支持多权限）
  - `userIds`：用户ID列表（支持多用户，N:N关系）
  - `isSystemRole`：是否为系统角色（布尔值，系统角色不可删除）
  - `isDefaultRole`：是否为默认角色（布尔值，新用户自动分配）
  - `priority`：角色优先级（数字，用于权限冲突解决）
  - `maxUsers`：最大用户数（可选，限制角色分配数量）
  - `expiresAt`：角色过期时间（可选，支持临时角色）
  - `createdAt`：创建时间
  - `updatedAt`：更新时间
  - `deletedAt`：软删除时间（可选）

- **领域规则**：
  - 角色名称、代码在租户内唯一，全局唯一性通过租户ID+名称/代码组合实现。
  - 角色必须归属于某个租户，实现数据软隔离。
  - 角色可选择性归属于某个组织，支持组织级角色管理。
  - 系统角色（如"管理员"、"普通用户"、"租户管理员"、"组织管理员"）不可删除，只能禁用。
  - 角色删除采用软删除策略，保留数据以便审计。
  - 角色状态变更需记录审计日志。
  - 角色分配需检查用户数量限制。
  - 角色过期后自动禁用，影响相关用户权限。
  - **以租户ID为标识，实现数据软隔离。所有与角色相关的业务数据（如权限分配、用户分配等）均需通过租户ID进行关联和隔离，确保不同租户间数据互不干扰。**

### 1.2 角色聚合根

- 角色（Role）为聚合根，聚合内可包含角色下的权限分配、用户分配等子实体的引用，但不直接持有其数据，仅通过ID或外键关联。
- **所有聚合内的子实体（如权限分配、用户分配等）均需包含租户ID字段，作为软隔离的关键标识。应用层和基础设施层在查询、操作数据时，必须基于当前租户ID进行过滤，防止数据越权访问。**

### 1.3 角色值对象

#### 1.3.1 角色名称（RoleName）
- 长度限制：2-50个字符
- 字符限制：仅允许字母、数字、下划线、连字符、中文
- 唯一性：在租户内唯一
- 验证规则：不能以数字开头，不能包含连续的特殊字符

#### 1.3.2 角色代码（RoleCode）
- 长度限制：3-20个字符
- 字符限制：仅允许大写字母、数字、下划线
- 唯一性：在租户内唯一
- 验证规则：必须以字母开头，全大写格式

#### 1.3.3 角色状态（RoleStatus）
- 枚举值：ACTIVE（激活）、SUSPENDED（禁用）、DELETED（已删除）
- 状态转换规则：定义各状态间的合法转换
- 业务影响：不同状态对角色分配、权限继承等的影响

#### 1.3.4 角色优先级（RolePriority）
- 数值范围：1-1000
- 默认值：100
- 业务规则：数值越小优先级越高，用于权限冲突解决

---

## 二、核心用例流程

### 2.1 角色创建

1. 管理员提交角色创建申请（填写角色名称、代码、描述等基本信息）。
2. 系统校验角色名称、代码在租户内的唯一性。
3. 验证角色代码格式符合规范。
4. 创建角色实体，状态为"激活"。
5. 设置角色优先级和限制条件。
6. 记录审计日志。
7. **所有与新角色相关的业务数据，均需绑定租户ID，实现数据软隔离。**

### 2.2 角色信息修改

- 仅租户管理员或系统管理员可修改角色信息。
- 修改角色名称、代码需重新验证唯一性。
- 系统角色只能修改描述和状态，不能修改名称和代码。
- 修改操作需记录审计日志。
- **修改操作仅限于当前租户ID下的数据，防止跨租户操作。**

### 2.3 角色激活/禁用

- 支持角色的激活、禁用操作，禁用后角色无法分配给新用户。
- 状态变更需记录审计日志。
- 禁用角色时，可选择是否同时移除现有用户分配。
- **激活/禁用操作需基于租户ID进行，确保只影响目标租户及其下属数据。**

### 2.4 角色软删除与恢复

- 删除操作为软删除，标记`deletedAt`时间。
- 系统角色不可删除，只能禁用。
- 支持角色恢复，恢复后状态为"禁用"。
- 删除与恢复均需记录审计日志。
- **软删除与恢复操作需基于租户ID进行，且相关业务数据（如用户分配等）也应同步标记或处理，确保数据隔离一致性。**

### 2.5 角色权限管理

1. 管理员为角色分配权限。
2. 系统验证权限的有效性和租户隔离。
3. 更新角色的权限列表。
4. 通知相关用户权限变更。
5. 记录权限分配审计日志。

### 2.6 角色用户管理

- 支持为角色分配、移除用户。
- 角色分配需检查用户数量限制。
- 支持批量用户操作。
- 角色分配变更实时生效。
- 角色分配操作需记录审计日志。

### 2.7 角色继承与组合

- 支持角色继承关系（父角色-子角色）。
- 支持角色组合（一个用户可拥有多个角色）。
- 角色权限冲突时按优先级解决。
- 角色继承变更需记录审计日志。

---

## 三、接口与API设计（RESTful）

- `POST /api/roles`：创建角色
- `GET /api/roles/{id}`：查询角色详情
- `PUT /api/roles/{id}`：更新角色信息
- `PATCH /api/roles/{id}/status`：变更角色状态（激活/禁用）
- `DELETE /api/roles/{id}`：软删除角色
- `POST /api/roles/{id}/restore`：恢复角色
- `POST /api/roles/{id}/permissions`：为角色分配权限
- `DELETE /api/roles/{id}/permissions/{permissionId}`：移除角色权限
- `POST /api/roles/{id}/users`：为角色分配用户
- `DELETE /api/roles/{id}/users/{userId}`：移除角色用户
- `GET /api/roles/{id}/users`：查询角色下的用户列表
- `GET /api/roles/{id}/permissions`：查询角色的权限列表
- `POST /api/roles/{id}/inherit`：设置角色继承关系
- `DELETE /api/roles/{id}/inherit`：移除角色继承关系

> **接口实现要求：**
> - 所有与角色相关的API请求，均需携带或自动注入租户ID，后端服务需基于租户ID进行数据过滤和权限校验，防止数据越权访问，实现软隔离。

---

## 四、安全与合规

### 4.1 角色安全

- 角色分配需验证操作者权限。
- 系统角色受保护，不可删除。
- 角色权限变更需二次确认。
- 角色分配操作需记录安全审计日志。

### 4.2 权限隔离

- 角色权限严格按租户隔离。
- 防止跨租户权限泄露。
- 权限继承需验证租户边界。
- 权限冲突解决机制。

### 4.3 数据保护

- 角色敏感信息加密存储。
- 支持角色数据导出和删除（GDPR合规）。
- 审计日志保留期限：7年。
- 数据备份和恢复机制。

---

## 五、审计与合规

- 所有角色相关操作（创建、修改、状态变更、删除、恢复、权限分配、用户分配等）均需记录详细审计日志，包含操作人、时间、变更内容等。
- 审计日志需支持追溯和合规导出。
- **审计日志中需包含租户ID字段，便于多租户环境下的合规追溯和隔离分析。**

---

## 六、示意图（Mermaid）

### 6.1 角色实体关系图

```mermaid
graph TD
    A[Role] --> B[Tenant]
    A --> C[Organization]
    A --> D[Permission]
    A --> E[User]
    A --> F[Role Inheritance]
    B --> G[Tenant Admin]
    C --> H[Department]
    D --> I[Permission Assignment]
    E --> J[User Assignment]
    
    classDef role fill:#e3f2fd,stroke:#1565c0,stroke-width:2px
    classDef tenant fill:#f3e5f5,stroke:#6a1b9a,stroke-width:2px
    classDef org fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
    classDef permission fill:#fff3e0,stroke:#ef6c00,stroke-width:2px
    classDef user fill:#fce4ec,stroke:#c2185b,stroke-width:2px
    
    class A,F role
    class B,G tenant
    class C,H org
    class D,I permission
    class E,J user
```

### 6.2 角色状态转换图

```mermaid
stateDiagram-v2
    [*] --> ACTIVE: 角色创建
    ACTIVE --> SUSPENDED: 管理员禁用
    SUSPENDED --> ACTIVE: 管理员激活
    ACTIVE --> DELETED: 软删除
    DELETED --> SUSPENDED: 恢复角色
    DELETED --> [*]: 硬删除
    
    note right of ACTIVE: 正常使用状态
    note right of SUSPENDED: 禁用状态
    note right of DELETED: 已删除状态
```

### 6.3 角色权限管理流程图

```mermaid
sequenceDiagram
    participant A as Admin
    participant R as Role Service
    participant P as Permission Service
    participant U as User Service
    participant DB as Database
    
    A->>R: 分配权限到角色
    R->>P: 验证权限有效性
    P-->>R: 权限验证结果
    R->>DB: 更新角色权限
    R->>U: 通知相关用户
    R-->>A: 返回操作结果
```

### 6.4 角色继承关系图

```mermaid
graph TD
    A[超级管理员] --> B[租户管理员]
    B --> C[部门管理员]
    C --> D[普通用户]
    
    E[系统管理员] --> F[应用管理员]
    F --> G[功能管理员]
    G --> H[普通用户]
    
    classDef admin fill:#ffebee,stroke:#c62828,stroke-width:2px
    classDef user fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
    
    class A,B,C,E,F,G admin
    class D,H user
```

---

## 七、扩展性考虑

### 7.1 多租户隔离

- 所有角色操作必须基于租户ID进行过滤。
- 角色数据在数据库层面通过租户ID进行分区。
- 缓存策略需考虑租户隔离。

### 7.2 性能优化

- 角色查询支持分页和搜索。
- 角色权限信息缓存。
- 用户角色关系缓存。

### 7.3 集成能力

- 支持LDAP/AD角色同步。
- 支持OAuth2.0角色映射。
- 支持SAML角色断言。
- 支持Webhook角色变更通知。

---

## 八、监控与运维

### 8.1 关键指标

- 角色创建成功率
- 角色分配成功率
- 权限变更频率
- 角色冲突率
- 系统角色使用率

### 8.2 告警机制

- 异常角色操作告警
- 批量角色变更告警
- 权限冲突告警
- 安全事件告警

### 8.3 运维工具

- 角色数据导入导出
- 批量角色操作
- 角色权限分析
- 审计日志分析

---

## 九、角色管理最佳实践

### 9.1 角色设计原则

- **最小权限原则**：用户只拥有完成工作所需的最小权限
- **职责分离**：不同角色承担不同职责，避免权限集中
- **定期审查**：定期审查角色权限，及时调整
- **文档化**：角色权限变更需文档化记录

### 9.2 角色命名规范

- 角色名称应清晰表达其职责
- 使用统一的命名前缀（如：ADMIN_、USER_、GUEST_）
- 避免使用过于宽泛的名称（如：管理员、用户）
- 支持多语言角色名称

### 9.3 角色生命周期管理

- 角色创建需经过审批流程
- 角色变更需影响评估
- 角色删除需确认无用户使用
- 定期清理无用角色

---

## 十、技术实现要点

### 10.1 领域事件设计

角色子领域应包含以下领域事件：
- `RoleCreatedEvent`：角色创建事件
- `RoleActivatedEvent`：角色激活事件
- `RoleSuspendedEvent`：角色禁用事件
- `RoleDeletedEvent`：角色删除事件
- `RoleRestoredEvent`：角色恢复事件
- `RoleInfoUpdatedEvent`：角色信息更新事件
- `RolePermissionAssignedEvent`：角色权限分配事件
- `RolePermissionRemovedEvent`：角色权限移除事件
- `RoleUserAssignedEvent`：角色用户分配事件
- `RoleUserRemovedEvent`：角色用户移除事件
- `RoleInheritanceSetEvent`：角色继承设置事件
- `RoleInheritanceRemovedEvent`：角色继承移除事件

### 10.2 值对象设计

- `RoleName`：角色名称值对象
- `RoleCode`：角色代码值对象
- `RoleStatusValue`：角色状态值对象
- `RolePriority`：角色优先级值对象

### 10.3 仓储接口设计

```typescript
abstract class RoleRepository {
  abstract findById(id: string, tenantId: string): Promise<Role | null>;
  abstract findByCode(code: string, tenantId: string): Promise<Role | null>;
  abstract findByName(name: string, tenantId: string): Promise<Role | null>;
  abstract findByTenant(tenantId: string): Promise<Role[]>;
  abstract findByOrganization(organizationId: string, tenantId: string): Promise<Role[]>;
  abstract findByUser(userId: string, tenantId: string): Promise<Role[]>;
  abstract findByPermission(permissionId: string, tenantId: string): Promise<Role[]>;
  abstract findSystemRoles(tenantId: string): Promise<Role[]>;
  abstract findDefaultRoles(tenantId: string): Promise<Role[]>;
  abstract save(role: Role): Promise<void>;
  abstract delete(id: string, tenantId: string): Promise<void>;
  abstract exists(id: string, tenantId: string): Promise<boolean>;
  abstract countByTenant(tenantId: string): Promise<number>;
}
```

### 10.4 应用服务设计

```typescript
class RoleService {
  async createRole(createRoleDto: CreateRoleDto): Promise<Role>;
  async updateRole(id: string, updateRoleDto: UpdateRoleDto): Promise<Role>;
  async activateRole(id: string): Promise<void>;
  async suspendRole(id: string): Promise<void>;
  async deleteRole(id: string): Promise<void>;
  async restoreRole(id: string): Promise<void>;
  async assignPermission(roleId: string, permissionId: string): Promise<void>;
  async removePermission(roleId: string, permissionId: string): Promise<void>;
  async assignUser(roleId: string, userId: string): Promise<void>;
  async removeUser(roleId: string, userId: string): Promise<void>;
  async setInheritance(roleId: string, parentRoleId: string): Promise<void>;
  async removeInheritance(roleId: string): Promise<void>;
}
```

---

## 十一、测试策略

### 11.1 单元测试

- 角色实体业务逻辑测试
- 值对象验证测试
- 领域事件测试
- 仓储接口测试

### 11.2 集成测试

- 角色创建流程测试
- 角色权限分配测试
- 角色用户分配测试
- 角色继承关系测试

### 11.3 端到端测试

- 角色管理完整流程测试
- 多租户隔离测试
- 权限冲突解决测试
- 性能压力测试

---

## 十二、部署与运维

### 12.1 环境配置

- 开发环境：支持角色快速创建和测试
- 测试环境：模拟生产环境角色配置
- 生产环境：严格控制角色创建和权限分配

### 12.2 监控告警

- 角色创建频率监控
- 权限变更监控
- 角色冲突监控
- 系统性能监控

### 12.3 备份恢复

- 角色数据定期备份
- 角色配置版本管理
- 角色数据恢复流程
- 灾难恢复预案

---

## 十三、总结

角色管理子领域是IAM系统的核心组件，承担着权限分配和用户管理的重要职责。通过严格的多租户隔离、完善的审计机制和灵活的扩展能力，确保系统在复杂的企业环境中安全、可靠地运行。

本设计文档为角色管理子领域的开发提供了全面的指导，涵盖了从领域建模到技术实现的各个方面，为后续的开发工作奠定了坚实的基础。

alwaysApply: false
---
# 角色管理子领域的详细设计
