---
description: 开发文档_租户管理子领域的详细设计
globs:
alwaysApply: false
---
# 租户管理子领域的详细设计

本节详细说明IAM系统中“租户管理”子领域的核心设计，包括领域实体、聚合、用例流程、接口规范及审计要求等，确保多租户架构下的隔离性、可扩展性与合规性。

---

## 一、租户领域实体设计

### 1.1 租户（Tenant）领域实体

> 设计要求：租户实体为纯领域对象，不包含任何ORM装饰器或数据库依赖。序列化安全性通过`class-transformer`控制，数据校验通过`class-validator`实现。

- **属性定义**：
  - `id`：租户唯一标识（UUID）
  - `name`：租户名称（唯一，必填）
  - `code`：租户编码（唯一，便于集成）
  - `status`：租户状态（激活、禁用、待审核、已删除等）
  - `adminUserId`：租户管理员用户ID（唯一，自动分配）
  - `createdAt`：创建时间
  - `updatedAt`：更新时间
  - `deletedAt`：软删除时间（可选）
  - `description`：租户描述（可选）
  - `settings`：租户自定义配置（JSON，扩展字段）

- **领域规则**：
  - 租户名称、编码全局唯一。
  - 系统必须有一个“系统租户”，不可删除。
  - 每个租户自动分配一个租户管理员用户。
  - 租户删除采用软删除策略，保留数据以便审计。
  - 租户状态变更需记录审计日志。
  - **以租户ID为标识，实现数据软隔离。所有与租户相关的业务数据（如用户、角色、组织等）均需通过租户ID进行关联和隔离，确保不同租户间数据互不干扰。**

### 1.2 租户聚合根

- 租户（Tenant）为聚合根，聚合内可包含租户下的组织、用户、角色等子实体的引用，但不直接持有其数据，仅通过ID或外键关联。
- **所有聚合内的子实体（如用户、角色、组织等）均需包含租户ID字段，作为软隔离的关键标识。应用层和基础设施层在查询、操作数据时，必须基于当前租户ID进行过滤，防止数据越权访问。**

---

## 二、核心用例流程

### 2.1 租户注册/创建

1. 用户提交租户注册申请（填写租户名称、管理员信息等）。
2. 系统校验租户名称、编码唯一性。
3. 创建租户实体，状态为“待激活”或“激活”。
4. 自动创建租户管理员用户，并分配“租户管理员”角色。
5. 发送确认邮件或通知。
6. 记录审计日志。
7. **所有与新租户相关的业务数据，均需绑定新生成的租户ID，实现数据软隔离。**

### 2.2 租户信息修改

- 仅租户管理员或系统管理员可修改租户信息（如名称、描述、配置等）。
- 修改操作需校验唯一性约束，并记录审计日志。
- **修改操作仅限于当前租户ID下的数据，防止跨租户操作。**

### 2.3 租户激活/禁用

- 支持租户的激活、禁用操作，禁用后租户下所有用户无法登录。
- 状态变更需记录审计日志。
- **激活/禁用操作需基于租户ID进行，确保只影响目标租户及其下属数据。**

### 2.4 租户软删除与恢复

- 删除操作为软删除，标记`deletedAt`时间。
- 支持租户恢复，恢复后状态为“禁用”或“待激活”。
- 删除与恢复均需记录审计日志。
- **软删除与恢复操作需基于租户ID进行，且相关业务数据（如用户、角色等）也应同步标记或处理，确保数据隔离一致性。**

---

## 三、接口与API设计（RESTful）

- `POST /api/tenants`：创建租户
- `GET /api/tenants/{id}`：查询租户详情
- `PUT /api/tenants/{id}`：更新租户信息
- `PATCH /api/tenants/{id}/status`：变更租户状态（激活/禁用）
- `DELETE /api/tenants/{id}`：软删除租户
- `POST /api/tenants/{id}/restore`：恢复租户

> **接口实现要求：**
> - 所有与租户相关的API请求，均需携带或自动注入租户ID，后端服务需基于租户ID进行数据过滤和权限校验，防止数据越权访问，实现软隔离。

---

## 四、审计与合规

- 所有租户相关操作（创建、修改、状态变更、删除、恢复）均需记录详细审计日志，包含操作人、时间、变更内容等。
- 审计日志需支持追溯和合规导出。
- **审计日志中需包含租户ID字段，便于多租户环境下的合规追溯和隔离分析。**

---

## 五、示意图（Mermaid）