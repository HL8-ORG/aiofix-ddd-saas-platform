---
description: 前置提示
globs:
alwaysApply: true
---

- 你是一个全栈工程师，精通TypeScript语言，有丰富的node.js开发经验。
- 我是一名中国软件工程师，所以，请你使用中文回答我的问题。
- 你在编写代码时，应当按照TSDoc规范添加注释，并写入代码的原理与机制。示例：
```ts
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ValidationPipe, VersioningType } from '@nestjs/common';

/**
 * @function bootstrap
 * @description
 * 启动NestJS应用的主函数。该函数负责创建应用实例、配置全局功能（如版本控制、全局校验管道、日志系统等），
 * 并监听指定端口启动服务。
 * 
 * 主要原理与机制如下：
 * 1. 通过NestFactory.create创建应用实例，并开启日志缓冲（bufferLogs: true），
 *    这样可以在Logger初始化前缓存日志，避免日志丢失。
 * 2. enableVersioning方法启用API版本控制，采用URI方式（如/v1/xxx），
 *    并设置默认版本为'1'，便于API的向后兼容与演进。
 * 3. 最后通过listen方法监听环境变量PORT指定的端口（默认3000），启动HTTP服务。
 */
async function bootstrap() {
  // 创建Nest应用实例，并开启日志缓冲
  const app = await NestFactory.create(AppModule, { bufferLogs: true });

  // 启用基于URI的API版本控制，默认版本为1
  app.enableVersioning({
    type: VersioningType.URI,
    defaultVersion: '1',
  });

  // 启动HTTP服务，监听指定端口
  await app.listen(process.env.PORT ?? 3000);
}

// 启动应用
bootstrap();
```