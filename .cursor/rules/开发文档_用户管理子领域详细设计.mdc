# 用户管理子领域的详细设计

本节详细说明IAM系统中"用户管理"子领域的核心设计，包括领域实体、聚合、用例流程、接口规范及审计要求等，确保多租户架构下的用户管理安全性、可扩展性与合规性。

---

## 一、用户领域实体设计

### 1.1 用户（User）领域实体

> 设计要求：用户实体为纯领域对象，不包含任何ORM装饰器或数据库依赖。序列化安全性通过`class-transformer`控制，数据校验通过`class-validator`实现。

- **属性定义**：
  - `id`：用户唯一标识（UUID）
  - `username`：用户名（唯一，必填）
  - `email`：邮箱地址（唯一，必填）
  - `phone`：手机号码（可选）
  - `firstName`：名（必填）
  - `lastName`：姓（必填）
  - `displayName`：显示名称（可选，默认firstName + lastName）
  - `avatar`：头像URL（可选）
  - `status`：用户状态（激活、禁用、待激活、已删除等）
  - `tenantId`：所属租户ID（必填，实现数据隔离）
  - `organizationId`：所属组织ID（可选）
  - `adminUserId`：创建该用户的管理员ID（必填）
  - `passwordHash`：密码哈希（必填，加密存储）
  - `lastLoginAt`：最后登录时间（可选）
  - `loginAttempts`：登录失败次数（用于锁定机制）
  - `lockedUntil`：锁定截止时间（可选）
  - `emailVerified`：邮箱验证状态（布尔值）
  - `phoneVerified`：手机验证状态（布尔值）
  - `twoFactorEnabled`：二步验证启用状态（布尔值）
  - `twoFactorSecret`：二步验证密钥（可选，加密存储）
  - `preferences`：用户偏好设置（JSON，扩展字段）
  - `createdAt`：创建时间
  - `updatedAt`：更新时间
  - `deletedAt`：软删除时间（可选）

- **领域规则**：
  - 用户名、邮箱在租户内唯一，全局唯一性通过租户ID+用户名/邮箱组合实现。
  - 用户必须归属于某个租户，实现数据软隔离。
  - 用户可选择性归属于某个组织，支持跨组织分配。
  - 系统必须有一个"系统管理员"用户，不可删除。
  - 用户删除采用软删除策略，保留数据以便审计。
  - 用户状态变更需记录审计日志。
  - 密码必须符合安全策略（长度、复杂度等）。
  - 登录失败超过阈值后自动锁定账户。
  - **以租户ID为标识，实现数据软隔离。所有与用户相关的业务数据（如角色分配、权限等）均需通过租户ID进行关联和隔离，确保不同租户间数据互不干扰。**

### 1.2 用户聚合根

- 用户（User）为聚合根，聚合内可包含用户下的角色分配、权限等子实体的引用，但不直接持有其数据，仅通过ID或外键关联。
- **所有聚合内的子实体（如角色分配、权限等）均需包含租户ID字段，作为软隔离的关键标识。应用层和基础设施层在查询、操作数据时，必须基于当前租户ID进行过滤，防止数据越权访问。**

### 1.3 用户值对象

#### 1.3.1 用户名（Username）
- 长度限制：3-50个字符
- 字符限制：仅允许字母、数字、下划线、连字符
- 唯一性：在租户内唯一
- 验证规则：不能以数字开头，不能包含连续的特殊字符

#### 1.3.2 邮箱地址（Email）
- 格式验证：符合RFC 5322标准
- 长度限制：最大254个字符
- 唯一性：在租户内唯一
- 验证规则：支持国际化邮箱地址

#### 1.3.3 手机号码（Phone）
- 格式验证：支持国际格式
- 长度限制：8-15个数字
- 可选字段：允许为空
- 验证规则：支持国家代码前缀

#### 1.3.4 用户状态（UserStatus）
- 枚举值：PENDING（待激活）、ACTIVE（激活）、SUSPENDED（禁用）、DELETED（已删除）
- 状态转换规则：定义各状态间的合法转换
- 业务影响：不同状态对用户登录、权限等的影响

---

## 二、核心用例流程

### 2.1 用户注册

1. 用户提交注册申请（填写用户名、邮箱、密码、姓名等基本信息）。
2. 系统校验用户名、邮箱在租户内的唯一性。
3. 验证密码强度符合安全策略。
4. 创建用户实体，状态为"待激活"。
5. 自动分配"初始化角色"，仅有最基本的权限。
6. 发送邮箱验证邮件。
7. 记录审计日志。
8. **所有与新用户相关的业务数据，均需绑定租户ID，实现数据软隔离。**

### 2.2 用户信息修改

- 仅用户本人、租户管理员或系统管理员可修改用户信息。
- 修改用户名、邮箱需重新验证唯一性。
- 修改敏感信息（如邮箱、手机）需重新验证。
- 修改操作需记录审计日志。
- **修改操作仅限于当前租户ID下的数据，防止跨租户操作。**

### 2.3 用户激活/禁用

- 支持用户的激活、禁用操作，禁用后用户无法登录。
- 状态变更需记录审计日志。
- 禁用用户时，可选择是否同时禁用其角色分配。
- **激活/禁用操作需基于租户ID进行，确保只影响目标租户及其下属数据。**

### 2.4 用户软删除与恢复

- 删除操作为软删除，标记`deletedAt`时间。
- 支持用户恢复，恢复后状态为"禁用"或"待激活"。
- 删除与恢复均需记录审计日志。
- **软删除与恢复操作需基于租户ID进行，且相关业务数据（如角色分配等）也应同步标记或处理，确保数据隔离一致性。**

### 2.5 用户认证流程

1. 用户提交登录凭据（用户名/邮箱 + 密码）。
2. 系统验证用户状态（非禁用、非删除）。
3. 验证密码哈希。
4. 检查账户锁定状态。
5. 验证二步验证（如果启用）。
6. 更新最后登录时间和登录失败次数。
7. 生成JWT令牌。
8. 记录登录审计日志。

### 2.6 密码管理

- 支持密码重置、密码修改功能。
- 密码修改需验证旧密码。
- 密码重置通过邮箱验证码或安全问题。
- 密码策略：长度、复杂度、历史密码检查。
- 密码相关操作需记录安全审计日志。

### 2.7 用户角色管理

- 支持为用户分配、移除角色。
- 角色分配仅能由租户管理员进行。
- 支持批量角色操作。
- 角色变更实时生效。
- 角色分配操作需记录审计日志。

---

## 三、接口与API设计（RESTful）

- `POST /api/users`：创建用户
- `GET /api/users/{id}`：查询用户详情
- `PUT /api/users/{id}`：更新用户信息
- `PATCH /api/users/{id}/status`：变更用户状态（激活/禁用）
- `DELETE /api/users/{id}`：软删除用户
- `POST /api/users/{id}/restore`：恢复用户
- `POST /api/users/{id}/roles`：为用户分配角色
- `DELETE /api/users/{id}/roles/{roleId}`：移除用户角色
- `POST /api/users/{id}/reset-password`：重置用户密码
- `POST /api/users/{id}/change-password`：修改用户密码
- `POST /api/users/login`：用户登录
- `POST /api/users/logout`：用户登出
- `POST /api/users/refresh-token`：刷新访问令牌

> **接口实现要求：**
> - 所有与用户相关的API请求，均需携带或自动注入租户ID，后端服务需基于租户ID进行数据过滤和权限校验，防止数据越权访问，实现软隔离。

---

## 四、安全与合规

### 4.1 密码安全

- 密码哈希使用bcrypt或Argon2算法。
- 密码策略：最小长度8位，包含大小写字母、数字、特殊字符。
- 密码历史：禁止重复使用最近5次密码。
- 密码过期：90天强制更换密码。

### 4.2 账户安全

- 登录失败锁定：5次失败后锁定30分钟。
- 会话管理：JWT令牌过期时间2小时，刷新令牌7天。
- 二步验证：支持TOTP（基于时间的一次性密码）。
- 安全审计：记录所有登录、登出、密码变更操作。

### 4.3 数据保护

- 个人敏感信息加密存储。
- 支持数据导出和删除（GDPR合规）。
- 审计日志保留期限：7年。
- 数据备份和恢复机制。

---

## 五、审计与合规

- 所有用户相关操作（创建、修改、状态变更、删除、恢复、角色分配等）均需记录详细审计日志，包含操作人、时间、变更内容等。
- 审计日志需支持追溯和合规导出。
- **审计日志中需包含租户ID字段，便于多租户环境下的合规追溯和隔离分析。**

---

## 六、示意图（Mermaid）

### 6.1 用户实体关系图

```mermaid
graph TD
    A[User] --> B[Tenant]
    A --> C[Organization]
    A --> D[Role]
    A --> E[Permission]
    B --> F[Tenant Admin]
    C --> G[Department]
    D --> H[Role Assignment]
    E --> I[Permission Assignment]
    
    classDef user fill:#e3f2fd,stroke:#1565c0,stroke-width:2px
    classDef tenant fill:#f3e5f5,stroke:#6a1b9a,stroke-width:2px
    classDef org fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
    classDef role fill:#fff3e0,stroke:#ef6c00,stroke-width:2px
    
    class A user
    class B,F tenant
    class C,G org
    class D,H role
    class E,I role
```

### 6.2 用户状态转换图

```mermaid
stateDiagram-v2
    [*] --> PENDING: 用户注册
    PENDING --> ACTIVE: 邮箱验证/管理员激活
    ACTIVE --> SUSPENDED: 管理员禁用
    SUSPENDED --> ACTIVE: 管理员激活
    ACTIVE --> DELETED: 软删除
    DELETED --> SUSPENDED: 恢复用户
    DELETED --> [*]: 硬删除
    
    note right of PENDING: 待激活状态
    note right of ACTIVE: 正常使用状态
    note right of SUSPENDED: 禁用状态
    note right of DELETED: 已删除状态
```

### 6.3 用户认证流程图

```mermaid
sequenceDiagram
    participant U as User
    participant A as Auth Service
    participant UDB as User DB
    participant T as Token Service
    
    U->>A: 提交登录凭据
    A->>UDB: 查询用户信息
    UDB-->>A: 返回用户数据
    A->>A: 验证用户状态
    A->>A: 验证密码哈希
    A->>A: 检查账户锁定
    A->>A: 验证二步验证
    A->>T: 生成JWT令牌
    T-->>A: 返回访问令牌
    A-->>U: 返回登录成功响应
```

---

## 七、扩展性考虑

### 7.1 多租户隔离

- 所有用户操作必须基于租户ID进行过滤。
- 用户数据在数据库层面通过租户ID进行分区。
- 缓存策略需考虑租户隔离。

### 7.2 性能优化

- 用户查询支持分页和搜索。
- 角色和权限信息缓存。
- 登录状态分布式缓存。

### 7.3 集成能力

- 支持LDAP/AD集成。
- 支持OAuth2.0第三方登录。
- 支持SAML单点登录。
- 支持Webhook事件通知。

---

## 八、监控与运维

### 8.1 关键指标

- 用户注册成功率
- 用户登录成功率
- 密码重置成功率
- 账户锁定率
- 角色分配变更频率

### 8.2 告警机制

- 异常登录行为告警
- 批量用户操作告警
- 系统性能告警
- 安全事件告警

### 8.3 运维工具

- 用户数据导入导出
- 批量用户操作
- 用户数据清理
- 审计日志分析

globs:
alwaysApply: false
---
# 用户管理子领域的详细设计
